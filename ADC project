/*
 * The purpose of this program is to demonstrate how a 20x2 LCD can be interfaced with a PIC processor. 
 * Refer to the lecture slides for more details on the physical connections.
 * You may want to consider changing this code, as needed, depending on your hardware. 
 * Author: Farid Farahmand 
 */


// PIC18F46K42 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1L
#pragma config FEXTOSC = LP     // External Oscillator Selection (LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power)
#pragma config RSTOSC = EXTOSC  // Reset Oscillator Selection (EXTOSC operating per FEXTOSC bits (device manufacturing default))

// CONFIG1H
#pragma config CLKOUTEN = OFF   // Clock out Enable bit (CLKOUT function is disabled)
#pragma config PR1WAY = ON      // PRLOCKED One-Way Set Enable bit (PRLOCK bit can be cleared and set only once)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

// CONFIG2L
#pragma config MCLRE = EXTMCLR  // MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
#pragma config PWRTS = PWRT_OFF // Power-up timer selection bits (PWRT is disabled)
#pragma config MVECEN = ON      // Multi-vector enable bit (Multi-vector enabled, Vector table used for interrupts)
#pragma config IVT1WAY = ON     // IVTLOCK bit One-way set enable bit (IVTLOCK bit can be cleared and set only once)
#pragma config LPBOREN = OFF    // Low Power BOR Enable bit (ULPBOR disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled , SBOREN bit is ignored)

// CONFIG2H
#pragma config BORV = VBOR_2P45 // Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 2.45V)
#pragma config ZCD = OFF        // ZCD Disable bit (ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
#pragma config PPS1WAY = ON     // PPSLOCK bit One-Way Set Enable bit (PPSLOCK bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config DEBUG = OFF      // Debugger Enable bit (Background debugger disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

// CONFIG3L
#pragma config WDTCPS = WDTCPS_31// WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled; SWDTEN is ignored)

// CONFIG3H
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4L
#pragma config BBSIZE = BBSIZE_512// Boot Block Size selection bits (Boot Block size is 512 words)
#pragma config BBEN = OFF       // Boot Block enable bit (Boot block disabled)
#pragma config SAFEN = OFF      // Storage Area Flash enable bit (SAF disabled)
#pragma config WRTAPP = OFF     // Application Block write protection bit (Application Block not write protected)

// CONFIG4H
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block not write-protected)
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
#pragma config WRTSAF = OFF     // SAF Write protection bit (SAF not Write Protected)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored)

// CONFIG5L
#pragma config CP = OFF         // PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)

#include <xc.h> // must have this
#include "C:\Users\jlwea\MPLABXProjects\cprogram.X\newxc8_header.h"
//#include "C:\Program Files\Microchip\xc8\v2.40\pic\include\proc\pic18f46k42"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4

#define RS LATD0                   /* PORTD 0 pin is used for Register Select */
#define EN LATD1                   /* PORTD 1 pin is used for Enable */
#define ldata LATB                 /* PORTB is used for transmitting data to LCD */

#define LCD_Port TRISB              
#define LCD_Control TRISD
#define Vref 5.0 // voltage reference 

void LCD_Init();
void LCD_Command(char );
void LCD_Char(char x);
void LCD_String(const char *);
void LCD_String_xy(char ,char ,const char*);
void MSdelay(unsigned int );
int digital; // holds the digital value 
float voltage; // hold the analog value (volt))
char data[10];
void ADC_Init();// DO: Declare void ADC_Init
float LUX;
char voltage_str[16];
char LUX_str[16];

/*****************************Main Program*******************************/
void main(void)
{       
    ADC_Init();
    LCD_Init();
  

    while (1) {
        ADCON0bits.GO = 1;
        while (ADCON0bits.GO); 

        digital = (ADRESH * 256) | ADRESL;
        voltage = digital * (Vref / 4096);
        LUX = voltage*42; // after several sample measurements, the LUX was equal to the input voltage multiplied by 42.

        sprintf(voltage_str, "%.2f", voltage);
        sprintf(LUX_str, "%.2f", LUX);

        LCD_String_xy(1, 0, "The input LUX");
        LCD_String_xy(2, 0, LUX_str);

        MSdelay(500); // Add a delay to update the LCD 
    }
}

/****************************Functions********************************/
void LCD_Init()
{
    MSdelay(15);
    LCD_Port = 0x00;
    LCD_Control = 0x00;
    LCD_Command(0x01);
    LCD_Command(0x38);
    LCD_Command(0x0c);
    LCD_Command(0x06);
}

void LCD_Clear()
{
    LCD_Command(0x01);
}

void LCD_Command(char cmd)
{
    ldata = cmd;
    RS = 0;
    EN = 1;
    NOP();
    EN = 0;
    MSdelay(3);
}

void LCD_Char(char dat)
{
    ldata = dat;
    RS = 1;
    EN = 1;
    NOP();
    EN = 0;
   MSdelay(1);
}

void LCD_String(const char *msg)
{
    while ((*msg) != 0)
    {       
        LCD_Char(*msg);
        msg++;    
    }
}

void LCD_String_xy(char row, char pos, const char *msg)
{
    char location = 0;
    if (row <= 1)
    {
        location = (0x80) | ((pos) & 0x0f);
        LCD_Command(location);
    }
    else
    {
        location = (0xC0) | ((pos) & 0x0f);
        LCD_Command(location);    
    }  
    LCD_String(msg);
}

void MSdelay(unsigned int val)
{
    unsigned int i, j;
    for (i = 0; i < val; i++)
        for (j = 0; j < 165; j++); 
}

void ADC_Init(void)
{
    ADCON0bits.FM = 1;
    ADCON0bits.CS = 1;

    TRISAbits.TRISA0 = 1;
    ANSELA = 0xFF;

    ADPCH = 0x0;
    ADCLK = 0x0;

    ADRESL = 0x0; ADRESH = 0x0;
    ADPREL = 0x0; ADPREH = 0x0;

    ADACQL = 0x0; ADACQH = 0x0;

    ADCON0bits.ON = 1;   
}
