
// Title: Touchpad calculator
// Purpose: To use a 4x4 keypad to perform basic arithmetic functions
// of two numbers, 1-9, and give the result in binary

// Dependencies: Common C libraries
// Compiler: XC8
// Author: James Weaver
// Outputs: all of PORTD and RA2
// Inputs: all of PORTB
// Versions:
        //Version 1.0: 4/10/2024 - first version

















#pragma config FEXTOSC = LP     // External Oscillator Selection (LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power)
#pragma config RSTOSC = EXTOSC  // Reset Oscillator Selection (EXTOSC operating per FEXTOSC bits (device manufacturing default))

// CONFIG1H
#pragma config CLKOUTEN = OFF   // Clock out Enable bit (CLKOUT function is disabled)
#pragma config PR1WAY = ON      // PRLOCKED One-Way Set Enable bit (PRLOCK bit can be cleared and set only once)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

// CONFIG2L
#pragma config MCLRE = EXTMCLR  // MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
#pragma config PWRTS = PWRT_OFF // Power-up timer selection bits (PWRT is disabled)
#pragma config MVECEN = ON      // Multi-vector enable bit (Multi-vector enabled, Vector table used for interrupts)
#pragma config IVT1WAY = ON     // IVTLOCK bit One-way set enable bit (IVTLOCK bit can be cleared and set only once)
#pragma config LPBOREN = OFF    // Low Power BOR Enable bit (ULPBOR disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled , SBOREN bit is ignored)

// CONFIG2H
#pragma config BORV = VBOR_2P45 // Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 2.45V)
#pragma config ZCD = OFF        // ZCD Disable bit (ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
#pragma config PPS1WAY = ON     // PPSLOCK bit One-Way Set Enable bit (PPSLOCK bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config DEBUG = OFF      // Debugger Enable bit (Background debugger disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

// CONFIG3L
#pragma config WDTCPS = WDTCPS_31// WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled; SWDTEN is ignored)

// CONFIG3H
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4L
#pragma config BBSIZE = BBSIZE_512// Boot Block Size selection bits (Boot Block size is 512 words)
#pragma config BBEN = OFF       // Boot Block enable bit (Boot block disabled)
#pragma config SAFEN = OFF      // Storage Area Flash enable bit (SAF disabled)
#pragma config WRTAPP = OFF     // Application Block write protection bit (Application Block not write protected)

// CONFIG4H
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block not write-protected)
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
#pragma config WRTSAF = OFF     // SAF Write protection bit (SAF not Write Protected)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored)

// CONFIG5L
#pragma config CP = OFF         // PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)

#include <xc.h> // must have this
//#include "../../../../../Program Files/Microchip/xc8/v2.40/pic/include/proc/pic18f46k42.h"
#include "C:\Users\jlwea\MPLABXProjects\cprogram.X\newxc8_header.h"
//#include "C:\Program Files\Microchip\xc8\v2.40\pic\include\proc\pic18f46k42"

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4
 
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
//#include <P18F458.h>

#define LCDData PORTB
#define En PORTCbits.RC2


unsigned int add(unsigned int, unsigned int);   
unsigned int subtract(unsigned int, unsigned int);
unsigned int multiply(unsigned int, unsigned int);
unsigned int divide(unsigned int, unsigned int);
void MSDelay(unsigned int); // Declares delay function

int main(void) {
   
    ANSELA = 0; // lines 101 through 108 initialize the necessasry ports to function as inputs or outputs
    TRISA = 0;
    ANSELD = 0;
    TRISD = 0;
    ANSELB = 0;
    TRISB = 0xF0;
    LATB = 0;

    volatile unsigned int X_input_REG = 0; // lines 109 through 112 declare variables
    volatile unsigned int Y_input_REG = 0;
    volatile unsigned char operation_REG = 0;
    volatile int Display_result_REG = 0;
    unsigned int c;

    while(X_input_REG == 0){ // main while loop for first input. Constantly waits for user to select first number

    PORTB = 0x02; 
        switch(PORTB) { // checks column 2 of key pad (3, 6, 9)
              case 0x22: 
              X_input_REG = 9;
              PORTD = 0x80;
              PORTA = 0;
              break;
            case 0x42: 
              X_input_REG = 6;    
              PORTD = 0x80;
              PORTA = 0;
              break;
            case 0x82: 
              X_input_REG = 3;
              PORTD = 0x80;
              PORTA = 0;
              break;

}

       
           
    PORTB = 0x04;
    
    
        
            switch(PORTB){ // checks column 3 of keypad (2, 5, 8, 0)
                case 0x14: //
                    X_input_REG = 0;
                    PORTD = 0x80;
                    PORTA = 0;
                    break;
                case 0x24: 
                    X_input_REG = 8;
                    PORTD = 0x80;
                    PORTA = 0;
                    break;
                case 0x44:
                    X_input_REG = 5;
                    PORTD = 0x80;
                    PORTA = 0;
                    break;
                case 0x84: 
                    X_input_REG = 2;
                    PORTD = 0x80;
                    PORTA = 0;
                    break;
            }
    
    PORTB = 0x08;
    
    
       
            switch(PORTB){ // checks column 4 of keypad (1, 4, 7)
                case 0x28: 
                    X_input_REG = 7;
                    PORTD = 0x80;
                    PORTA = 0;
                    break;
                case 0x48: 
                    X_input_REG = 4;
                    PORTD = 0x80;
                    PORTA = 0;
                    break;
                case 0x88: 
                    X_input_REG = 1;
                    PORTD = 0x80;
                    PORTA = 0;
                    break;
             }
    
    } 
    PORTB = 0x01;
    
    while(PORTB == 0x01){ // checks column 1 of keypad to see what operation will be performed 
        MSDelay(1);
    }
             switch(PORTB){
                case 0x11: // division
                    operation_REG = 0x0D;
                    PORTD = 0x00;
                    break;
                case 0x21: // multiplication
                    operation_REG = 0x0C;
                    PORTD = 0x00;
                    break;
                case 0x41: // subtraction
                    operation_REG = 0x0B;
                    PORTD = 0x00;
                    break;
                case 0x81: // addition
                    operation_REG = 0x0A;
                    PORTD = 0x00;
                    break;
             }
             
             
    PORTB = 0x02;
    
       while(Y_input_REG == 0){ // main while loop for second input. Constantly waits for user to select first number
        
    

    PORTB = 0x02;
        switch(PORTB) {
              case 0x22: 
              Y_input_REG = 9;
              PORTD = 0x01;
              break;
            case 0x42:
              Y_input_REG = 6;    
              PORTD = 0x01;
              break;
            case 0x82: 
              Y_input_REG = 3;
              PORTD = 0x01;
              break;

}

             
           
    PORTB = 0x04;

            switch(PORTB){
                case 0x14: 
                    Y_input_REG = 0;
                    PORTD = 0x01;
                    break;
                case 0x24:
                    Y_input_REG = 8;
                    PORTD = 0x01;
                    break;
                case 0x44: 
                    Y_input_REG = 5;
                    PORTD = 0x01;
                    break;
                case 0x84:
                    Y_input_REG = 2;
                    PORTD = 0x01;
                    break;
            }
    
    PORTB = 0x08;
    
            switch(PORTB){
                case 0x28:
                    Y_input_REG = 7;
                    PORTD = 0x01;
                    break;
                case 0x48:
                    Y_input_REG = 4;
                    PORTD = 0x01;
                    break;
                case 0x88:
                    Y_input_REG = 1;
                    PORTD = 0x01;
                    break;
             }
    
    } 
    
    
    PORTB = 0x02; // checks to see if user has hit the # button. Waits in a delay until it is pressed
    if (PORTB = 0x02){
        while(PORTB != 0x12){
            MSDelay(1);
        
        }
    
    }
    
    
    MSDelay(250);
    PORTD = 0x00;
    MSDelay(250);
    
    
    switch(operation_REG){ // performs calculation based on previous inputs and displays output to PORTD
        case 0x0D:
            divide(X_input_REG, Y_input_REG); //calls divide function
            Display_result_REG = c;
           PORTD = Display_result_REG;
            break;
        case 0x0C:
            multiply(X_input_REG, Y_input_REG); // calls multiply function
            Display_result_REG = c;
            PORTD = Display_result_REG;
            break;
        case 0x0B:
            subtract(X_input_REG, Y_input_REG); // calls subtract function
            Display_result_REG = c;                          // the subtraction case checks if result is negative. 
                                                            // lights up a green LED to indicate if it is.
            if (Display_result_REG < 0){
                
                PORTD = ~(Display_result_REG) + 1;
                PORTA = 0x04;
            }
            if (Display_result_REG >= 0){
                PORTD = Display_result_REG;
            }
            break;
        case 0x0A:
            add(X_input_REG, Y_input_REG);  // calls add function
            Display_result_REG = c;
            PORTD = Display_result_REG;
            break;
            
            
    
    }
             
    X_input_REG = 0; // resets both X and Y for next iteration
    Y_input_REG = 0;
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
           
             
             
             
            
        MSDelay(1); // Debounce delay or rate limiting for reading inputs
    

    return 0; // Should never reach here in an embedded program's infinite loop
}

void MSDelay(unsigned int itime) { // main delay function
    unsigned int i;
    unsigned char j;
    for(i = 0; i < itime; i++)
        for(j = 0; j < 255; j++);
}


unsigned int add(unsigned int a, unsigned int b){
    unsigned int c;
    c = a + b;
    return c;
}

unsigned int subtract(unsigned int a, unsigned int b){
    unsigned int c;
    c = a - b;
    return c;
}

unsigned int multiply(unsigned int a, unsigned int b){
    unsigned int c;
    c = a * b;
    return c;
}

unsigned int divide(unsigned int a, unsigned int b){
    unsigned int c;
    c = a / b;
    return c;
}
