/*
 * ---------------------
 * Title: Simple LED Blinking 
 * ---------------------
 * Program Details:
 *  The purpose of this program is to simply blink an LED 
 * Inputs: myDelay 
 * Outputs: RD0 (output)
 * Setup: C- Simulator
 * Date: Feb 24, 2023
 * File Dependencies / Libraries: It is required to include the 
 * Configuration Header File 
 * Compiler: xc8, 2.4
 * Author: Farid Farahmand
 * Versions:
 *      V1.0: Original
 * Useful links:  
 *      Datasheet: https://ww1.microchip.com/downloads/en/DeviceDoc/PIC18(L)F26-27-45-46-47-55-56-57K42-Data-Sheet-40001919G.pdf 
 *      PIC18F Instruction Sets: https://onlinelibrary.wiley.com/doi/pdf/10.1002/9781119448457.app4 
 *      List of Instrcutions: http://143.110.227.210/faridfarahmand/sonoma/courses/es310/resources/20140217124422790.pdf 
 */

// PIC18F46K42 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1L
#pragma config FEXTOSC = LP     // External Oscillator Selection (LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power)
#pragma config RSTOSC = EXTOSC  // Reset Oscillator Selection (EXTOSC operating per FEXTOSC bits (device manufacturing default))

// CONFIG1H
#pragma config CLKOUTEN = OFF   // Clock out Enable bit (CLKOUT function is disabled)
#pragma config PR1WAY = ON      // PRLOCKED One-Way Set Enable bit (PRLOCK bit can be cleared and set only once)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

// CONFIG2L
#pragma config MCLRE = EXTMCLR  // MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
#pragma config PWRTS = PWRT_OFF // Power-up timer selection bits (PWRT is disabled)
#pragma config MVECEN = ON      // Multi-vector enable bit (Multi-vector enabled, Vector table used for interrupts)
#pragma config IVT1WAY = ON     // IVTLOCK bit One-way set enable bit (IVTLOCK bit can be cleared and set only once)
#pragma config LPBOREN = OFF    // Low Power BOR Enable bit (ULPBOR disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled , SBOREN bit is ignored)

// CONFIG2H
#pragma config BORV = VBOR_2P45 // Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 2.45V)
#pragma config ZCD = OFF        // ZCD Disable bit (ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
#pragma config PPS1WAY = ON     // PPSLOCK bit One-Way Set Enable bit (PPSLOCK bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config DEBUG = OFF      // Debugger Enable bit (Background debugger disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

// CONFIG3L
#pragma config WDTCPS = WDTCPS_31// WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled; SWDTEN is ignored)

// CONFIG3H
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4L
#pragma config BBSIZE = BBSIZE_512// Boot Block Size selection bits (Boot Block size is 512 words)
#pragma config BBEN = OFF       // Boot Block enable bit (Boot block disabled)
#pragma config SAFEN = OFF      // Storage Area Flash enable bit (SAF disabled)
#pragma config WRTAPP = OFF     // Application Block write protection bit (Application Block not write protected)

// CONFIG4H
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block not write-protected)
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
#pragma config WRTSAF = OFF     // SAF Write protection bit (SAF not Write Protected)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored)

// CONFIG5L
#pragma config CP = OFF         // PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)

#include <xc.h> // must have this
//#include "../../../../../Program Files/Microchip/xc8/v2.40/pic/include/proc/pic18f46k42.h"
#include "C:\Users\jlwea\MPLABXProjects\cprogram.X\newxc8_header.h"
//#include "C:\Program Files\Microchip\xc8\v2.40\pic\include\proc\pic18f46k42"

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4
 
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define Vref 5.0 // voltage reference 
int digital; // holds the digital value 
float difficulty; // hold the analog value (volt))
char data[10];
void ADC_Init();// DO: Declare void ADC_Init

//float ADC_conversion(float difficulty);


float ADC_conversion(void) {
    ADCON0bits.GO = 1; // Start ADC conversion

    while (ADCON0bits.GO); // Wait for conversion to finish

    // Calculate digital value from ADC result
  //  int digital = (ADRESH << 8) | ADRESL;
    
    // Calculate difficulty (voltage) based on digital value
    //difficulty = (float)digital * Vref / 4096.0; // Vref is 5.0
    
       digital = (ADRESH*256) | (ADRESL);/*Combine 8-bit LSB and 2-bit MSB*/
       difficulty = digital*((float) Vref/(float)(4096)); //DO: define voltage = Vref/4096 (note that voltage is float type

    return difficulty;
}



void ADC_Init(void)
{
    //------Setup the ADC
    ADCON0bits.FM = 1;//DO: using ADCON0 set right justify
    ADCON0bits.CS = 1;//DO: Using ADCON0 set ADCRC Clock

    TRISBbits.TRISB5 = 1;
    ANSELBbits.ANSELB5 = 1;

    ADPCH = 0b001101;//DO: Set RA0 as Analog channel in ADC ADPCH
    ADCLK = 0x0;//DO: set ADC CLOCK Selection register to zero

    ADRESL = 0x0; ADRESH = 0x0;//DO: Clear ADC Result registers

    ADPREL = 0x0; ADPREH = 0x0;//DO: set precharge select to 0 in register ADPERL & ADPERH

    ADACQL = 0x0; ADACQH = 0x0; //DO: Set qcquisition LOW and HIGH bytes to zero

    ADCON0bits.ON = 1;//DO: Turn ADC On on register ADCON0   
}







void __interrupt(irq(IRQ_INT0),base(0x4008)) INT0_ISR(void)
{
    if (PIR1bits.INT0IF == 1) // Check if interrupt flag for INT0 is set to 1
    {
       
          __delay_ms(4000);
        
        // Always clear the interrupt flag for INT0 when done
        PIR1bits.INT0IF = 0;
        
        //PORTDbits.RD0 = 0;// Turn off the LED on PORTDbits.RD0
    }
}
void INTERRUPT_Initialize (void)
{
    
    TRISBbits.TRISB0 = 1;
    
    ANSELBbits.ANSELB0 = 0;
    
    INTCON0bits.GIE = 1;// Enable interrupt priority bit in INTCON0 (check INTCON0 register and find the bit)
    
    INTCON0bits.GIEH = 1; // Enable high priority interrupts using bits in INTCON0
    
    INTCON0bits.GIEL = 1;// Enable low priority interrupts using bits in INTCON0
    
    INTCON0bits.INT0EDG = 1;// Interrupt on rising edge of INT0 pin using bits in INTCON0
    
    INTCON0bits.IPEN = 1; // Set the interrup high priority (IP) for INT0 - INT0IP
    
    PIE1bits.INT0IE = 1;// Enable the interrup (IE) for INT0

    PIR1bits.INT0IF = 0;//Clear interrupt flag for INT01
  
    IVTBASEU = 0x00;
    IVTBASEH = 0x40;
    IVTBASEL = 0x08;
}


void delay(float difficulty) {
    unsigned int i;
    unsigned char j;
    int roundedValue = round(difficulty*10000);
    for(i = 0; i < roundedValue; i++) {
        for(j = 0; j < 1; j++); // Adjust the loop count based on difficulty
    }
}


void main (void) {

    ANSELD = 0;    
    TRISD = 0b00000000;
    PORTD = 0b00000000;
    TRISA = 0xff;
    ADC_Init();
    INTERRUPT_Initialize();
  
    //float difficulty = 2500;

    while(1){
           
        ADC_conversion();
        PORTDbits.RD7=0;//turns on LED  
        PORTDbits.RD0=1;//turns on LED
            delay(difficulty);
        PORTDbits.RD0=0;//turns on LED
        PORTDbits.RD1=1;//turns on LED  
            delay(difficulty);
        PORTDbits.RD1=0;//turns on LED
        PORTDbits.RD2=1;//turns on LED  
            delay(difficulty);
        PORTDbits.RD2=0;//turns on LED
        PORTDbits.RD3=1;//turns on LED  
            delay(difficulty);
        PORTDbits.RD3=0;//turns on LED
        PORTDbits.RD4=1;//turns on LED  
            delay(difficulty);
        PORTDbits.RD4=0;//turns on LED
        PORTDbits.RD5=1;//turns on LED  
            delay(difficulty);
        PORTDbits.RD5=0;//turns on LED
        PORTDbits.RD6=1;//turns on LED  
            delay(difficulty);
        PORTDbits.RD6=0;//turns on LED
        PORTDbits.RD7=1;//turns on LED  
            delay(difficulty);
    }
}
    
